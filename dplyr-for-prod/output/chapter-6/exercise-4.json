["<h1 class=\"reading\" id=\"the-lazy-data.table\">The lazy <code>data.table</code>\n</h1>","<p>To get this level of performance, you don’t have to actually start writing data.table code. You can instead use <code>dtplyr</code>.</p>","<div class=\"cell\">\n<pre class=\"r cell-code\"><code>library(dtplyr)\n\nfl_lazy &lt;- lazy_dt(flights)\n\nfl_lazy |&gt;\n  filter(carrier == \"AA\") |&gt;\n  count(origin, dest) |&gt;\n  arrange(origin, desc(dest))</code></pre>\n</div>","<p>The <code>lazy_dt()</code> function is the key here. It creates a <code>dtplyr_step</code> object which allows us to make use of data.table via dplyr functions. The print method of the results are very informative. We’ll dive into this in the next section. But before then, Let’s make another bench mark to compare the results. Don’t worry about all of the code in there, we’ll go over it shortly.</p>","<div class=\"cell\">\n<pre class=\"r cell-code\"><code>bench::mark(\n  dtplyr = {\n    fl_lazy |&gt;\n      filter(carrier == \"AA\") |&gt;\n      count(origin, dest) |&gt;\n      arrange(origin, desc(dest)) |&gt;\n      collect()\n  },\n  dt = fl[carrier == \"AA\", .N, by = .(origin, dest)][order(origin, -dest)],\n  check = FALSE\n)</code></pre>\n</div>"]