["<h1 class=\"reading\" id=\"understanding-the-lazy-table\">Understanding the lazy table</h1>","<p>In the previous section we created what is referred to as a lazy table. Let’s spend some time understanding what we did. The function <code>lazy_dt()</code> converted our tibble into a <em>lazy</em> data.table.</p>","<p>The <a href=\"https://dtplyr.tidyverse.org/reference/lazy_dt.html\">manual page</a> for <code>lazy_dt()</code> says</p>","<blockquote>\n<p>“A lazy data.table captures the intent of dplyr verbs, only actually performing computation when requested…”</p>\n</blockquote>","<p>This is similar to the concept of lazy function argument evaluation. But instead of delaying evaluation, dtplyr is building up an expression that will eventually be evaluated.</p>","<div class=\"cell\">\n<pre class=\"r cell-code\"><code>res &lt;-\n  fl_lazy |&gt;\n  filter(carrier == \"AA\") |&gt;\n  count(origin, dest) |&gt;\n  arrange(origin, desc(dest))\n\nres</code></pre>\n</div>","<p>Above the data preview we can see the <code>Call</code> that has been created. dtplyr is <em>translating</em> our dplyr code into data.table code. In essence, our dplyr code is acting as a <strong>front-end</strong> while data.table is acting the <strong>back-end</strong>. In this case, the front-end is the user-facing interface—in this case the user is the developer—and the backend is where the computation is occurring. We can see the translation that dtplyr has built up by using <code>dplyr::show_query()</code>.</p>","<div class=\"cell\">\n<pre class=\"r cell-code\"><code>show_query(res)</code></pre>\n</div>","<p>dtplyr is essentially acting is a translator between a common syntax in dplyr and an execution engine in data.table. dtplyr is being lazy in that it is not running any code but instead it is building up a set of instructions that will be executed.</p>","<p>To make dtplyr actually execute the code that it has built up, we need to request the results. This is done by using <code>dplyr::collect()</code>.</p>","<div>\n<blockquote>\n<p><strong>Note</strong></p>\n<p>Note that you can also use <code>as.data.table()</code>, <code>as_tibble()</code>, <code>as.data.frame()</code> to bring the results into a data.frame.</p>\n</blockquote>\n</div>","<div class=\"cell\">\n<pre class=\"r cell-code\"><code>collect(res)</code></pre>\n</div>"]