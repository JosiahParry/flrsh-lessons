["<h1 class=\"reading\" id=\"dplyr-as-a-frontend\">dplyr as a frontend</h1>","<p>dplyr’s syntax is undeniably influential because it is so easy to use an so influential.</p>","<p>More important than the R package “dplyr”, is the philisophical concept it embodies. dplyr is an abstraction layer on top of your data. I want you to think of dplyr as a frontend UI for data analysis. Much like how applications will have a pretty frontend UI that is designed with the end users in mind, dplyr is designed with an unfaltering focus on ergonomics for data scientists.</p>","<p>Most applications have two components: a “client” side and a “server” side. The UI is the “client” where users interact and the “server” is where computation happens. dplyr, is a client side tool. dplyr is a way of writing data manipulation instructions. These instructions are compiled and handled by a backend process that will execute your code for you.</p>","<p>dplyr’s syntax can be used to build an execute massive queries with in Apache Spark &amp; Databricks, Snowflake, Microsoft SQL Server, Amazon Redshift, as well as many other data bases. Or, it can be used to work with data bigger than memory with DuckDB or Apache Arrow. The choice of tool is yours. But with them, you will never have to leave dplyr.</p>","<p>The subsequent chapters will introduce you to working with lazy tables.</p>"]