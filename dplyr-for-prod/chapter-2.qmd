---
title: It pays to be lazy
description: |
  In R, there are two primary evaluation strategies: eager and lazy.  Understanding lazy evaluation is key to harnessing dplyr's power in production code.
---

# R and evaluation {.reading}

Before we dive into the nuts and bolts of what makes dplyr so powerful in production code, we need to first have a good understanding of the two primary types of evaluation strategies in R. We need to first be able to understand the distinction between eager and lazy evaluation. 


# What does it mean to be "eager?" {.exercise}

dplyr, and the vast majority of code that we run in R is eagerly evaluated. 

```{r}
library(dplyr)

skin_colors <- starwars |>
  count(skin_color) |>
  arrange(-n)
```

When we execute this expression, it runs right to completion no questions asked. Eager evaluation wants to get the job done right then and there. Most functions that we use in R are eagerly evaluated. You run them, wait for them to come to completion, then have the results. 

But being quick on the draw is not always the most effective use of time. Sometimes it pays to be lazy. This is particularly true when working with large datasets. A less common approach is _**lazy evaluation**_.

:::{.script-pane}

```{r}
library(dplyr)

skin_colors <- starwars |>
  count(skin_color) |>
  arrange(-n)
```

:::


# Being lazy pays off {.reading}

<!-- should there be a way to click a word and have a popover of the definition? Like a glossary idea ? -->

Lazy evaluation, or sometimes referred to as "call-by-need", delays execution until the very last moment. In R, function arguments are lazily evaluated. That means that they are not computed until they are actually needed. This is very powerful! It let's us write code like this: 

```{r}
lazyy <- function(x, y = x + 2) {
  x + y
}

lazyy(2)
```

The value of `y` is set to the value of `x` plus `2` but we don't actually know the value of `x` until it's provided as an argument. For a bit clearer example, take, this function.

```{r}
hello_world <- function(x) {
  "hello world"
}

hello_world()
```


It prints `"hello world"`, but did you notice something? We provided an argument `x`, that is never used! Since the argument `x` is never used, and arguments are lazily evaluated, it will never be executed. That means we can commit crimes in the x argument but never get caught.

```{r}
hello_world(stop("You shall not pass!!"))
```

We've tried to abort the function by calling `stop()` in the function argument. No dice.

Let's try another example where we conditionally evaluate an argument.

```{r}
null_or_y <- function(x, y) {
  if (isTRUE(x)) {
    y
  } else {
    NULL
  }
}
```

With this function we can pass a value of `TRUE` and it will return the value of `y`, if the value is `FALSE`, then function will return `NULL`.

When `x = TRUE`, the argument `y` is evaluated. 

```{r error =TRUE}
null_or_y(TRUE, stop("stop right there! 👮🏻‍♂️"))
```

However, if we provide `FALSE`...

```{r error = TRUE}
null_or_y(FALSE, stop("stop right there! 👮🏻‍♂️"))
```

No error is emitted, and we get `NULL` returned back to us.

## Laziness is efficient

Being able to effectively harness lazy evaluation may as well be a super power. When done right, it lets us do a lot with very little.

As you'll see in the next chapters, being lazy is what lets dplyr become so useful in so many different contexts. dplyr uses lazy evaluation by collecting instruction, creating a plan of action, then taking action only when explicitly asked. 




